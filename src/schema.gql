# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AnswerEntity {
  base_probability: String
  behavior_model: String

  """notes"""
  description: String

  """entity id"""
  id: String
  isChannelAnswer: Boolean
  isDmAnswer: Boolean
  isGroupAnswer: Boolean

  """request"""
  request: String

  """response"""
  response: String
}

type BotEntity {
  afterTaskDelay: Int
  afterTaskIdleTime: Int
  answersDb: String
  api_hash: String
  api_id: String
  behaviorModel: String
  botName: String
  clientState: String
  clientStateUpdateTime: String
  copyFrom: Int
  readDelay: Int
  replacements: String
  scenario: String
  sessionString: String
  spamDBname: String
  taskOrder: String
  typeDelayMultiplier: String
  voice: String
}

type BotEvent {
  event_date: Float
  event_message: String
  log_event: String
}

type BotStateEntity {
  bot: BotEntity
  childProcess: ChildProcessEntity
  error: String
  eventLogs: [BotEvent!]
  isErrored: Boolean
  isRunning: Boolean
  isStarted: Boolean
  isStopped: Boolean
  joining_groups: Boolean
  joining_groups_chat_ids: [String!]
  lastMessage: String
  lastUpdate: Float
  leaving_groups: Boolean
  leaving_groups_chat_ids: [String!]
  startedDate: Float
  stoppedDate: Float
}

type ChildProcessEntity {
  connected: Boolean
  exitCode: Float
  id: Int
  killed: Boolean
  pid: Float
  signalCode: String
  spawnfile: String
}

input CreateAnswerEntityInput {
  """base_probability"""
  base_probability: String!

  """behavior_model"""
  behavior_model: String!

  """description"""
  description: String

  """isChannelAnswer"""
  isChannelAnswer: Boolean!

  """isDmAnswer"""
  isDmAnswer: Boolean!

  """isGroupAnswer"""
  isGroupAnswer: Boolean!

  """request"""
  request: String!

  """response"""
  response: String!
}

input CreateBotInput {
  afterTaskDelay: Int
  afterTaskIdleTime: Int
  answersDb: String
  api_hash: String
  api_id: Int
  behaviorModel: String
  botName: String
  copyFrom: Int
  readDelay: Int
  replacements: String
  scenario: String
  sessionString: String
  taskOrder: String
  typeDelayMultiplier: Int
  voice: String
}

input JoinGroupsInput {
  api_ids: [Int!]!
  behavior_model: String = "default"
  chatNames: [String!]!
  join_delay: Int = 5000
  processing_enabled: Boolean = false
  spam_frequency: Int = 1000
}

input LeaveGroupsInput {
  api_ids: [Int!]!
  chatNames: [String!]!
}

type Mutation {
  createAnswer(createDatabaseInput: CreateAnswerEntityInput!): AnswerEntity!
  createBot(createBotInput: CreateBotInput!): BotEntity!
  joinGroups(JoinGroupsInput: JoinGroupsInput!): [BotStateEntity!]!
  leaveGroups(input: LeaveGroupsInput!): [BotStateEntity!]!
  removeAnswer(id: String!): Int!
  removeBot(api_id: Int!): BotEntity!
  restartBot(api_id: Int!): BotEntity!
  setUsername(api_id: Int!, username: String!): String!
  updateBot(api_id: Int!, updateBotInput: UpdateBotInput!): BotEntity!
}

type Query {
  answer(name: String!): AnswerEntity
  answers: [AnswerEntity!]!
  bot(api_id: Int!): BotEntity!
  bots: [BotEntity!]!
  getBotState(id: Int!): BotStateEntity!
  getBotStates: [BotStateEntity!]!
  getProcessesCount: Int!
  reloadStates: [BotStateEntity!]!
  someAnswers(findSomeAnswersInput: UpdateDatabaseInput!): [AnswerEntity!]!
  startBot(api_id: Int!): BotEntity!
  startBots: [BotEntity!]!
  stopBot(api_id: Int!): BotStateEntity!
  stopBots: [BotEntity!]!
}

input UpdateBotInput {
  afterTaskDelay: Int
  afterTaskIdleTime: Int
  answersDb: String
  behaviorModel: String
  readDelay: Int
  replacements: String
  scenario: String
  taskOrder: String
  typeDelayMultiplier: String
  voice: String
}

input UpdateDatabaseInput {
  """base_probability"""
  base_probability: String

  """behavior_model"""
  behavior_model: String

  """description"""
  description: String

  """isChannelAnswer"""
  isChannelAnswer: Boolean

  """isDmAnswer"""
  isDmAnswer: Boolean

  """isGroupAnswer"""
  isGroupAnswer: Boolean

  """request"""
  request: String

  """response"""
  response: String
}